%YAML 1.2
---
# Syntax highlighting in Sublime3: http://www.sublimetext.com/docs/3/syntax.html
# Scope naming: https://www.sublimetext.com/docs/3/scope_naming.html
name: Clean
file_extensions: [icl, dcl]
scope: source.clean

variables:
  module_name: "([A-Za-z][A-Za-z0-9._']*)"
  upper_case_id: "(?:[A-Za-z][A-Za-z0-9_']*)"
  lower_case_id: "(?:[a-z][A-Za-z0-9_']*)"
  many_upper_case_ids: '({{upper_case_id}}(,\s*)?)+'
  operator: '(?:[><=|&%$+-/\\\*~@%#\:^?]+)'
contexts:
  main:
    - include: module_declaration
    - include: comments
    - include: imports
    - include: class_def
    - include: function_type_decl
    - include: control_keywords
    - include: local_def_keywords
    - include: other_keywords
    - include: operators
    - include: basic_types
    - include: qualified_module_name
  function_import:
    - match: ({{upper_case_id}})
      captures:
        1: entity.name.function
  type_import:
    - match: '(::)\s*({{upper_case_id}})\s*(?:\(({{many_upper_case_ids}})\))?,?'
      captures:
        1: keyword.other.clean
        2: entity.name.type.clean
    - match: '(::)\s*({{upper_case_id}})\s*(?:\{({{many_upper_case_ids}})\})?'
      captures:
        1: keyword.other.clean
        2: entity.name.type.clean
    - match: '(::)\s*({{upper_case_id}})\s*(?:\((\.\.)\))?,?'
      captures:
        1: keyword.other.clean
        2: entity.name.type.clean
    - match: '(::)\s*({{upper_case_id}})\s*(?:\{(\.\.)\})?'
      captures:
        1: keyword.other.clean
        2: entity.name.type.clean
  class_import:
    - match: '(class)\s+({{upper_case_id}})'
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
    - match: '(class)\s+({{upper_case_id}})\(\.\.\)'
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
    - match: '(class)\s+({{upper_case_id}})\(many_upper_case_ids\)'
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
  instance_import:
    - match: '(instance)\s+({{upper_case_id}})\s+((?:{{upper_case_id}}\s+)+)'
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
        3: entity.name.type.clean
  imports:
    - include: qualified_import
    - include: simple_import
    - include: from_import
  qualified_import:
    - match: ^(import)\s+(qualified)
      captures:
        1: keyword.control.import.clean
        2: keyword.control.import.clean
      push:
        - meta_scope: meta.qualified_import.clean
        - match: (as)
          captures:
            1: keyword.control.import.clean
        - match: '{{module_name}}'
          captures:
            1: entity.name.namespace.clean
        - match: ($|;)
          pop: true
  from_import:
    - match: ^(from)\s+({{module_name}})
      captures:
        1: keyword.control.import.clean
        2: entity.name.namespace.clean
      push:
        - meta_scope: meta.from_import.clean
        - match: '(import)'
          captures:
            1: keyword.control.import.clean
        - include: class_import
        - include: instance_import
        - include: type_import
        - include: function_import
        - match: ($|;)
          pop: true
  simple_import:
    - match: ^(import)\s+
      captures:
        1: keyword.control.import.clean
      push:
        - meta_scope: meta.simple_import.clean
        - match: '{{module_name}}'
          captures:
            1: entity.name.namespace.clean
        - match: ($|;)
          pop: true
  comments:
    - include: line_comments
    - include: block_comments
  line_comments:
    - match: (\/\/)
      captures:
        1: punctuation.definition.comment.clean
      push:
        - meta_scope: comment.line.clean
        - match: \n
          pop: true
  block_comments:
    - match: (\/\*)
      captures: 
        1: punctuation.definition.comment.clean
      push:
        - meta_scope: comment.block.clean
        - match: (\*\/)
          captures:
            1: punctuation.definition.comment.clean
          pop: true
  module_declaration:
    - match: ^(implementation|definition|system)
      captures:
        1: keyword.other.clean
    - match: (module)
      captures:
        1: keyword.other.clean
      push: 
        - meta_scope: meta.declaration.module.clean
        - match: '{{module_name}}'
          captures:
            1: entity.name.namespace.clean
        - match: ($|;)
          pop: true
  function_type_decl:
    - match: '({{lower_case_id}}|{{upper_case_id}})\s*(::|∷)'
      scope: meta.function_decl.clean
      captures:
        1: entity.name.function.clean
        2: keyword.other.double-colon.clean
      push:
        - include: type_signature
        - match: ($|;)
          pop: true
    - match: '(\({{operator}}\))\s+(infix(?:r|l)?)\s+([0-9])+\s*(::|∷)'
      scope: meta.function_decl.clean
      captures:
        1: entity.name.function.infix.clean
        2: keyword.other.clean
        3: variable.parameter.clean
        4: keyword.other.double-colon.clean
      push:
        - include: type_signature
        - match: ($|;)
          pop: true
  type_signature: 
    - match: '(\|)'
      captures:
        1: keyword.other.given_that.clean
      pop: true
    - match: (->|→)
      captures:
        1: keyword.other.arror.clean
    - match: (\!)
      captures:
        1: keyword.other.strict.clean
    - match: '(\*)'
      captures:
        1: keyword.other.unique.clean
    - match: '({{lower_case_id}})'
      captures:
        1: variable.parameter.clean
    - match: '({{upper_case_id}})'
      captures:
        1: storage.type.clean
  operators:
    - match: '({{operator}})'
      captures:
        1: keyword.operator.clean
  control_keywords:
    - match: \b(if|case|of)\b
      captures:
        1: keyword.other.clean
  local_def_keywords:
    - match: \b(where|with|#|let|in)\b
      captures:
        1: keyword.other.clean
  other_keywords:
    - match: \b(otherwise)\b
      captures:
        1: keyword.other.clean
  class_def:
    - match: '(class)\s+({{upper_case_id}}|{{operator}})\s+({{lower_case_id}})\s+(where)'
      scope: meta.class.clean
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
        3: variable.parameter.clean
        4: keyword.other.clean
  basic_types:
    - match: (\".*\")
      captures:
        1: string.quoted.double.clean
    - match: (\'.\')
      captures:
        1: string.quoted.single.clean
    - match: '\b((?:-)?[0-9]+\.[0-9]+(?:E(?:-)?[0-9]+)?)\b'
      captures:
        1: constant.numeric.float.clean
    - match: \b(0)\b
      captures:
        1: constant.numeric.integer.clean
    - match: '\b((?:-)?[1-9]+[0-9]*)\b'
      captures:
        1: constant.numeric.integer.clean
    - match: '\b((?:-)?0x[0-9A-F]+)\b'
      captures:
        1: constant.numeric.hex.clean
    - match: '\b((?:-)?0[0-9]+)\b'
      captures:
        1: constant.numeric.octal.clean
    - match: (True|False)
      captures:
        1: constant.language.clean
  qualified_module_name:
    - match: \'({{upper_case_id}}|{{lower_case_id}})\'
      captures:
        1: entity.name.namespace.clean







