%YAML 1.2
---
# Syntax highlighting in Sublime3: http://www.sublimetext.com/docs/3/syntax.html
# Scope naming: https://www.sublimetext.com/docs/3/scope_naming.html
name: Clean
file_extensions: [icl, dcl]
scope: source.clean

variables:
  special_char: '~|@|#|\$|%|\^|\?|!|\+|-|\*|<|>|\\|\/|\||&|=|:|\.'
  lower_case_id: "(?:[a-z][A-Za-z0-9_`]*)"
  upper_case_id: "(?:[A-Z][A-Za-z0-9_`]*)"
  funny_id: '(?:{{special_char}})+'
  many_upper_case_ids: '({{upper_case_id}}(,\s*)?)+'
  any_id: '(?:{{upper_case_id}}|{{lower_case_id}})'
  many_ids: '(?:{{any_id}},\s*)*{{any_id}}'
  func_name: '{{lower_case_id}}|{{upper_case_id}}|{{operator}}'
  module_name: "(?:[A-Za-z_][A-Za-z0-9._']*)"
  class_name: '{{lower_case_id}}|{{upper_case_id}}|{{operator}}'
  operator: '(?:\.|{{funny_id}})+'
  constraint_name: '(?:{{any_id}}|{{operator}})(?:\{\|\*\|\})?'
  type_name: '\(\)|{{upper_case_id}}'
contexts:
  main:
    - include: module_declaration
    - include: comments
    - include: imports
    - include: class_def
    - include: type_decl
    - include: instance
    - include: derive
    - include: generic
    - include: dynamic
    - include: function_type_decl
    - include: explicit_imports
    - include: control_keywords
    - include: local_def_keywords
    - include: other_keywords
    - include: operators
    - include: basic_types
    - include: qualified_module_name
    - include: open_brackets
  open_brackets:
    - match: \(
      push: close_brackets
    - match: \)
      scope: invalid.illegal.stray-bracket-end
  close_brackets:
    - match: \)
      pop: true
    - include: main
  explicit_imports:
    - include: type_import
    - include: class_import
    - include: instance_import
    - include: generic_import
  type_import:
    - match: '(::)\s*({{upper_case_id}})\s*(?:\({{many_ids}}\))'
      scope: meta.import.explicit.type.clean
      captures:
        1: keyword.other.double-colon.clean
        2: storage.type.clean
    - match: '(::)\s*({{upper_case_id}})\s*(?:\{{{many_ids}}\})'
      scope: meta.import.explicit.type.clean
      captures:
        1: keyword.other.double-colon.clean
        2: storage.type.clean
    - match: '(::)\s*({{upper_case_id}})\s*(?:\(\.\.\))?'
      scope: meta.import.explicit.type.clean
      captures:
        1: keyword.other.double-colon.clean
        2: storage.type.clean
    - match: '(::)\s*({{upper_case_id}})\s*(?:\{\.\.\})?'
      scope: meta.import.explicit.type.clean
      captures:
        1: keyword.other.double-colon.clean
        2: storage.type.clean
  class_import:
    - match: '(class)\s+({{class_name}})'
      scope: meta.import.explicit.class.clean
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
    - match: '(class)\s+({{class_name}})\(\.\.\)'
      scope: meta.import.explicit.class.clean
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
    - match: '(class)\s+({{class_name}})\(many_upper_case_ids\)'
      scope: meta.import.explicit.class.clean
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
  instance_import:
    - match: '(instance)\s+({{class_name}})'
      scope: meta.import.explicit.instance.clean
      captures:
        1: keyword.other.instance.clean
        2: entity.name.class.clean
      push: type
  type:
    - match: '(\.?\#?\!?\*?\[\#?\!?(?:{{type_name}})?\!?\])'
      scope: meta.import.explicit.instance.clean
      captures:
        1: storage.type.clean
    - match: '(\.?\#?\!?\*?\{\#?\!?(?:{{type_name}})?\!?\})'
      scope: meta.import.explicit.instance.clean
      captures:
        1: storage.type.clean
    - include: basic_type
  generic_import:
    - match: '(generic)\s+{{any_id}}'
      scope: meta.import.explicit.generic.clean
      captures:
        1: keyword.other.generic.clean
  imports:
    - include: hidden_import
    - include: qualified_import
    - include: simple_import
    - include: from_import
  hidden_import:
    - match: '^(import)\s+{{module_name}}\s+(\=\>)\s+(qualified)'
      scope: meta.import.simple.clean
      captures:
        1: keyword.control.import.clean
        2: keyword.control.hidden.clean
        3: keyword.control.qualified.clean
  qualified_import:
    - match: ^(import)\s+(qualified)\s+{{module_name}}\s+(as)\s+({{module_name}})
      scope: meta.import.qualified.clean
      captures:
        1: keyword.control.import.clean
        2: keyword.control.qualified.clean
        3: keyword.control.as.clean
        4: entity.name.namespace.clean
  from_import:
    - match: ^(from)\s+{{module_name}}\s+(import)
      scope: meta.import.from.clean
      captures:
        1: keyword.control.from.clean
        2: keyword.control.import.clean
  simple_import:
    - match: ^(import)\s+{{module_name}}
      scope: meta.import.simple.clean
      captures:
        1: keyword.control.import.clean
  comments:
    - include: line_comments
    - include: block_comments
  line_comments:
    - match: (\/\/)
      captures:
        1: punctuation.definition.comment.clean
      push:
        - meta_scope: comment.line.clean
        - match: \n
          pop: true
  block_comments:
    - match: (\/\*)
      captures: 
        1: punctuation.definition.comment.clean
      push:
        - meta_scope: comment.block.clean
        - match: (\*\/)
          captures:
            1: punctuation.definition.comment.clean
          pop: true
  module_declaration:
    - match: ^(implementation|definition|system)
      captures:
        1: keyword.other.clean
    - match: (module)
      captures:
        1: keyword.other.clean
      push: 
        - meta_scope: meta.declaration.module.clean
        - match: '{{module_name}}'
          captures:
            1: entity.name.namespace.clean
        - match: ($|;)
          pop: true
  function_type_decl:
    - match: '(?:\()?({{func_name}})(?:\))?\s*(::|∷)'
      captures:
        1: entity.name.function.clean
        2: keyword.other.double-colon.clean
      push:
        - meta_scope: meta.declaration.function.clean
        - include: type_signature
        - match: (?=$|;)
          pop: true
    - match: '\(({{func_name}})\)\s+(infix(?:r|l)?)\s+([0-9]+)\s*(::|∷)'
      scope: meta.declaration.function.clean
      captures:
        1: entity.name.function.infix.clean
        2: keyword.other.infix.clean
        3: constant.numeric.integer.clean
        4: keyword.other.double-colon.clean
      push:
        - include: type_signature
        - match: (?=$|;)
          pop: true
  basic_type:
    - match: (\#)
      captures:
        1: keyword.other.unboxed.clean
    - match: (\!)
      captures:
        1: keyword.other.strict.clean
    - match: '(\*)'
      captures:
        1: keyword.other.unique.clean
    - match: '({{lower_case_id}})'
      captures:
        1: variable.parameter.clean
    - match: '({{type_name}})'
      captures:
        1: storage.type.clean
    - match: (->|→)
      captures:
        1: keyword.other.arror.clean
    - match: \(
      push: tuple_type
    - match: \{
      push: array_type
    - match: ','
      pop: true
    - match: (?=$|;)
      pop: true
    - match: '(?=\})'       # We need the lookahead to see if it's a record
      pop: true
  tuple_type:
    - match: '(,)'
      captures:
        1: keyword.other.comma.clean
    - match: \)
      pop: true
    - include: type
  array_type:
    - match: \}
      pop: true
    - include: type
  type_signature: 
    - include: comments
    - include: constraint
    - include: type
  operators:
    - match: '({{operator}})'
      captures:
        1: keyword.operator.clean
  control_keywords:
    - match: \b(if|case|of)\b
      captures:
        1: keyword.other.clean
  local_def_keywords:
    - match: \b(where)\b
      captures:
        1: keyword.other.where.clean
    - match: \b(with)\b
      captures:
        1: keyword.other.with.clean
    - match: \b(#)\b
      captures:
        1: keyword.other.let-before.clean
    - match: \b(let)\b
      captures:
        1: keyword.other.let.clean
    - match: \b(in)\b
      captures:
        1: keyword.other.in.clean
  other_keywords:
    - match: \b(otherwise)\b
      captures:
        1: keyword.other.clean
  class_def:
    - match: '^(class)\s+({{class_name}})\s+'
      scope: meta.class.clean
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
      push:
        - match: (where)
          captures:
            1: keyword.other.clean
          pop: true
        - match: ({{lower_case_id}})\s*
          captures:
            1: variable.parameter.clean
        - include: constraint
        - match: (::)
          captures:
            1: keyword.other.double-colon.clean
          push:
            - include: type_signature
            - match: ($|;)
              pop: true
        - match: ($|;)
          pop: true
    - match: '^(class)\s+({{class_name}})'
      scope: meta.class.clean
      captures:
        1: keyword.other.clean
        2: entity.name.class.clean
      push:
        - include: function_type_decl
        - match: (?=$|;)
          pop: true
  basic_types:
    - match: '"'
      push:
        - meta_scope: string.quoted.double.clean
        - match: '"'
          pop: true
        - match: '\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[0abtnvfre\\"])'
          scope: constant.character.escape.clean
    - match: (\'.\'|\'\\.\')
      captures:
        1: string.quoted.single.clean
    - match: '\b((?:-)?[0-9]+\.[0-9]+(?:E(?:-)?[0-9]+)?)\b'
      captures:
        1: constant.numeric.float.clean
    - match: \b(0)\b
      captures:
        1: constant.numeric.integer.clean
    - match: '\b((?:-)?[1-9]+[0-9]*)\b'
      captures:
        1: constant.numeric.integer.clean
    - match: '\b((?:-)?0x[0-9A-F]+)\b'
      captures:
        1: constant.numeric.hex.clean
    - match: '\b((?:-)?0[0-9]+)\b'
      captures:
        1: constant.numeric.octal.clean
    - match: \b(True|False)\b
      captures:
        1: constant.language.clean
    - match: \b(Just|Nothing)\b
      captures:
        1: constant.language.clean
    - match: \b(Left|Right)\b
      captures:
        1: constant.language.clean
  qualified_module_name:
    - match: \'({{upper_case_id}}|{{lower_case_id}})\'
      captures:
        1: entity.name.namespace.clean
  type_decl:
    - match: '^(::)\s*({{upper_case_id}})\s*((?:{{lower_case_id}}\s*)*)(\=)\s*(\.\.)' # Extendable ADTs
      captures:
        1: keyword.other.double-colon.clean
        2: entity.name.type.clean 
        3: variable.parameter.clean
        4: keyword.other.clean
        5: keyword.other.clean
      push:
        - meta_scope: meta.definition.type.clean
        - match: $|;
          pop: true
    - match: '^(::)\s*({{upper_case_id}})\s*((?:{{lower_case_id}}\s*)*)(\=|\|)\s*'
      captures:
        1: keyword.other.double-colon.clean
        2: entity.name.type.clean 
        3: variable.parameter.clean
        4: keyword.other.clean
      push:
        - meta_scope: meta.definition.type.clean
        - match: \{
          push:
            - include: record_decl
        - include: constructors
        - include: pop_if_new_def
    - match: '^(::)\s*({{upper_case_id}})\s*((?:{{lower_case_id}}\s*)*)(:==)\s*'
      captures:
        1: keyword.other.double-colon.clean
        2: entity.name.type.clean 
        3: variable.parameter.clean
        4: keyword.other.clean
      push:
        - include: qualified_module_name
        - meta_scope: meta.definition.type.clean
        - match: '({{upper_case_id}})'
          captures:
            1: storage.type.clean
        - match: $|;
          pop: true
        - include: operators
    - match: '^(::)\s*({{upper_case_id}})\s*((?:{{lower_case_id}}\s*)*)$|;'
      captures:
        1: keyword.other.double-colon.clean
        2: entity.name.type.clean 
        3: variable.parameter.clean
      push:
        - meta_scope: meta.definition.type.clean
        - include: pop_if_new_def
  record_decl:
    - match: '\}'
      pop: true
    - include: function_type_decl
  constructors:
    - include: comments
    - include: existential_constructor
    - include: infix_constructor
    - include: normal_constructor
  infix_constructor:
    - match: '(?:\()?({{func_name}})(?:\))?\s+(infix(?:r|l)?)\s+([0-9]+)\s*'
      captures:
        1: entity.name.constructor.infix.clean
        2: keyword.other.infix.clean
        3: constant.numeric.integer.clean
        4: keyword.other.double-colon.clean
      push:
        - include: pop_if_new_def
        - match: '({{upper_case_id}})'
          captures:
            1: storage.type.clean 
        - match: '({{lower_case_id}})'
          captures:
            1: variable.parameter.clean
        - match: (\|)
          captures:
            1: keyword.other.clean 
          pop: true
        - match: (?=\&)
          pop: true
  normal_constructor:
    - match: '({{upper_case_id}})'
      captures:
        1: entity.name.constructor.clean
      push:
        - meta_scope: meta.constructor.clean
        - include: pop_if_new_def
        - match: '({{upper_case_id}})'
          captures:
            1: storage.type.clean 
        - match: '({{lower_case_id}})'
          captures:
            1: variable.parameter.clean
        - match: (\|)
          captures:
            1: keyword.other.clean 
          pop: true
        - match: (?=\&)
          pop: true
  existential_constructor:
    - match: (E\.)
      captures:
        1: keyword.existential.clean
      push:
        - match: '({{lower_case_id}})'
          captures:
            1: variable.parameter.clean
        - match: '(:)'
          captures:
            1: keyword.colon.clean
        - include: exist_type_constraint
        - include: normal_constructor
        - include: infix_constructor
        - match: $|;
          pop: true
  pop_if_new_def:   # Unfortunately we need lookahead for this
    - match: '^(?=\s*::)'
      pop: true
    - match: '^(?=^\s*{{lower_case_id}})'
      pop: true
    - match: ^$     # This one doesn't quite follow the language specs
      pop:  true   
    - match: ^(?=\({{operator}}\))
      pop: true
    - match: ^(?=\b=\b)
      pop: true
    - match: (?=\/\*)
      pop: true
    - match: (?=\/\/)
      pop: true
  pop_if_new_import:
    - match: '(?=from)'
      pop: true
    - match: '(?=import)'
      pop: true
  instance:
    - match: '^(instance)\s+({{class_name}})'
      scope: meta.instance.clean
      captures:
        1: keyword.other.instance.clean
        2: entity.name.class.clean
      push:
        - include: constraint
        - match: (?=where)
          captures:
            1: keyword.other.clean
          pop: true
        - match: (?:$|;)
          pop: true
        - include: type
        - match: '({{lower_case_id}})'
          captures:
            1: variable.parameter.clean
  derive:
    - match: '(derive)'
      captures:
        1: keyword.other.clean
      push:
        - meta_scope: meta.derive.clean
        - match: (class)
          captures: 
            1: keyword.other.
        - match: '({{func_name}})|({{class_name}})\s+({{upper_case_id}})+'
          captures:
            1: entity.name.function.clean
            2: entity.name.class.clean
            3: storage.type.clean
        - match: ($|;)
          pop: true
  generic:
    - match: (generic)\s+({{func_name}})\s+({{lower_case_id}})+
      captures:
        1: keyword.other.generic.clean
        2: entity.name.function.clean
        3: variable.parameter.clean
      push:
        - match: '(::|∷)'
          captures:
            1: keyword.other.double-colon.clean
        - include: type_signature
        - match: ($|;)
          pop: true
  constraint:
    - match: '(\|)'
      captures:
        1: keyword.other.given_that.clean
      push:
        - meta_scope: meta.constraint.clean
        - include: comments
        - match: '(&)'
          captures: 
            1: keyword.other.clean
        - match: ({{constraint_name}})\s*,
          captures: 
            1: entity.name.class.clean
        - match: ({{constraint_name}})\s+({{lower_case_id}})\s*
          captures: 
            1: entity.name.class.clean
            2: variable.parameter.clean
          push:
            - match: (?=where)
              captures:
                1: keyword.other.where.clean
              pop: true
            - match: ({{lower_case_id}})\s*
              captures: 
                1: variable.parameter.clean
            - match: ($|;)
              pop: true
            - match: (?=&)
              pop: true
        - match: (?=where)  
          pop: true
        - match: ($|;)
          pop: true
  exist_type_constraint:
    - match: '(\&)'
      captures:
        1: keyword.other.given_that.clean
      push:
        - meta_scope: meta.exist_constraint.clean
        - include: comments
        - match: ({{constraint_name}})\s*,
          captures: 
            1: entity.name.class.clean
        - match: ({{constraint_name}})\s+({{lower_case_id}})\s*
          captures: 
            1: entity.name.class.clean
            2: variable.parameter.clean
          push:
            - match: ({{lower_case_id}})\s*
              captures: 
                1: variable.parameter.clean
            - match: ($|;)
              pop: true
        - match: (?=$|;)
          pop: true
  dynamic:
    - match: '\(({{lower_case_id}})\s*(\:\:)'
      captures:
        1: variable.parameter.clean
        2: keyword.operator.double-colon.clean
      push:
        - include: type
        - match: (?=\))
          pop: true
    - match: \)
      pop: true




